{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The location which resources will be deployed to"
            }
        },        
        "resourceNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix to be used in naming resources"
             }
        },               
        "SP-clientID": {
            "type": "string",
            "metadata": {
                "description": "Client ID of service principal that has access to AML workspace"
             }            
        },
        "SP-secret": {
            "type": "securestring",
            "metadata": {
                "description": "Secret of service principal that has acccess to AML workspace"
             }            
        },
        "computeInstanceSize": {
            "type": "string",
            "defaultValue": "Standard_D3_v2",            
            "metadata": {
                "description": "VM size of the AML Compute Instance"
             }            
        }                        
    },
    "variables": {
        "storageAccountName": "[concat(parameters('resourceNamePrefix'), 'storage')]",
        "keyVaultName": "[concat(parameters('resourceNamePrefix'), '-kvault')]",
        "applicationInsightsName": "[concat(parameters('resourceNamePrefix'), '-ai')]",        
        "functionAppName": "[concat(parameters('resourceNamePrefix'), '-functions')]",
        "amlWorkspaceName": "[concat(parameters('resourceNamePrefix'), '-aml')]",
        "amlComputeInstanceName": "[parameters('resourceNamePrefix')]"        
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },        
        {
            "type": "microsoft.insights/components",
            "apiVersion": "2015-05-01",
            "name": "[variables('applicationInsightsName')]",
            "location": "[parameters('location')]",
            "kind": "web",
            "properties": {
                "Application_Type": "web"
            }
        },      
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "name": "[variables('functionAppName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic"
            },
            "kind": "functionapp",
            "properties": {
                "maximumElasticWorkerCount": 1,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0,
                "reserved": "true"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2019-08-01",
            "name": "[variables('functionAppName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('functionAppName'))]"
            ],
            "kind": "functionapp,linux",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('functionAppName'))]",
                "linuxFxVersion": "Python|3.7",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(concat('microsoft.insights/components/', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(concat('microsoft.insights/components/', variables('applicationInsightsName')), '2015-05-01').ConnectionString]"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "clientID",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=https://', variables('keyVaultName'), '.vault.azure.net/secrets/SP-clientID/)')]"
                        },
                        {
                            "name": "secret",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=https://', variables('keyVaultName'), '.vault.azure.net/secrets/SP-secret/)')]"
                        },
                        {
                            "name": "tenantID",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=https://', variables('keyVaultName'), '.vault.azure.net/secrets/SP-tenantID/)')]"
                        },
                        {
                            "name": "subscriptionID",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=https://', variables('keyVaultName'), '.vault.azure.net/secrets/SP-subscriptionID/)')]"
                        },
                        {
                            "name": "resourceGroupName",
                            "value": "[resourceGroup().name]"
                        },
                        {
                            "name": "amlWorkspaceName",
                            "value": "[variables('amlWorkspaceName')]"
                        }                        
                    ]                
                }
            }
        },   
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2018-02-14",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",      
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "Standard"
                },
                "tenantId": "[subscription().tenantID]",
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantID]",
                        "objectId": "[reference(concat('Microsoft.Web/sites/', variables('functionAppName')), '2019-08-01', 'Full').identity.principalId]",
                        "permissions": {
                            "keys": [],
                            "secrets": [
                                "Get",
                                "List"
                            ],
                            "certificates": []
                        }
                    }
                ],
                "enabledForDeployment": true,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true
            }
        },               
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2018-02-14",
            "name": "[concat(variables('keyVaultName'), '/SP-clientID')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('SP-clientID')]",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2018-02-14",
            "name": "[concat(variables('keyVaultName'), '/SP-secret')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('SP-secret')]",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2018-02-14",
            "name": "[concat(variables('keyVaultName'), '/SP-subscriptionID')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[subscription().subscriptionID]",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2018-02-14",
            "name": "[concat(variables('keyVaultName'), '/SP-tenantID')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[subscription().tenantID]",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.MachineLearningServices/workspaces",
            "apiVersion": "2019-11-01",
            "name": "[variables('amlWorkspaceName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('microsoft.insights/components', variables('applicationInsightsName'))]"
            ],
            "sku": {
                "name": "Enterprise",
                "tier": "Enterprise"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "applicationInsights": "[resourceId('microsoft.insights/components', variables('applicationInsightsName'))]"
            }
        },
      {
        "type": "Microsoft.MachineLearningServices/workspaces/computes",
        "apiVersion": "2020-01-01",
        "name": "[concat(variables('amlWorkspaceName'), '/', variables('amlComputeInstanceName'))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('amlWorkspaceName'))]"
        ],
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
            "computeType": "computeinstance",
            "computeLocation" : "[parameters('location')]",
            "properties": {
                "vmSize" : "[parameters('computeInstanceSize')]",
                "applicationSharingPolicy": "Personal",
                "sshSettings": {
                    "sshPublicAccess": "Disabled"
                }
            }
        }
      }
    ]
}